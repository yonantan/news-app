import type { NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { trpc } from "../utils/trpc";

const Home: NextPage = () => {
  const [input, setInput] = useState('');

  const latestArticles = trpc.article.getAll.useQuery('', { enabled: !Boolean(input) });
  const searchResults = trpc.article.getAll.useQuery(input, { enabled: false });

  return (
    <>
      <Head>
        <title>Dronez Newz</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex min-h-screen flex-col items-center justify-center p-4">
        <h1 className="text-5xl font-extrabold leading-normal text-gray-700 md:text-[5rem]">
          <span className="text-purple-300">D</span>ronez
        </h1>
        <form className="lg:w-2/3" onSubmit={(event) => {
          event.preventDefault();
          searchResults.refetch();
        }}>
          <label htmlFor="default-search" className="mb-2 text-sm font-medium text-gray-900 sr-only dark:text-gray-300">Search</label>
          <div className="relative">
            <div className="flex absolute inset-y-0 left-0 items-center pl-3 pointer-events-none">
              <svg aria-hidden="true" className="w-5 h-5 text-gray-500 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg>
            </div>
            <input onChange={(event) => setInput(event.currentTarget.value)} type="search" className="block p-4 pl-10 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Search Drone-Related Articles..." />
            <button type="submit" className="text-white absolute right-2.5 bottom-2.5 bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Search</button>
          </div>
        </form>
        <div className="mt-3 grid gap-3 pt-3 text-center md:grid-cols-2 lg:w-2/3">
          {(input && searchResults.isFetched ? searchResults : latestArticles)?.data?.map(({
            author,
            description,
            title,
            url,
            urlToImage
          }) => <ArticleCard key={url} author={author || ""} description={description || ""} title={title || ""} urlToImage={urlToImage || ""} url={url} />)}
        </div>
      </main>
    </>
  );
};

export default Home;

type ArticleCardProps = {
  author: string;
  description: string;
  title: string;
  url: string;
  urlToImage: string;
};

const ArticleCard = ({
  author,
  description,
  title,
  url,
  urlToImage,
}: ArticleCardProps) => {
  return (
    <section className="flex flex-col justify-center rounded border-2 border-gray-500 p-6 shadow-xl duration-500 motion-safe:hover:scale-105 overflow-hidden">
      <img src={urlToImage} />
      <h2 className="text-lg text-gray-700 whitespace-nowrap overflow-ellipsis overflow-hidden">{title}</h2>
      <p className="text-sm text-gray-600 max-h-10 overflow-hidden">{description}</p>
      <a
        className="m-auto mt-3 w-fit text-sm text-violet-500 underline decoration-dotted underline-offset-2 overflow-hidden overflow-ellipsis whitespace-nowrap max-w-full"
        href={url}
        target="_blank"
        rel="noreferrer"
      >
        {author || url}
      </a>
    </section>
  );
};
